{"version":3,"file":"parse.js","names":["parseLosslessNumber","revive","parse","text","reviver","parseNumber","arguments","length","undefined","i","value","parseValue","expectValue","expectEndOfInput","parseObject","charCodeAt","codeOpeningBrace","skipWhitespace","object","initial","codeClosingBrace","eatComma","start","key","parseString","throwObjectKeyExpected","eatColon","throwObjectValueExpected","throwObjectKeyOrEndExpected","parseArray","codeOpeningBracket","array","codeClosingBracket","expectArrayItem","push","throwArrayItemOrEndExpected","_ref","_ref2","_ref3","_ref4","_ref5","_parseString","parseNumeric","parseKeyword","name","slice","isWhitespace","codeDoubleQuote","result","codeBackslash","char","escapeChar","escapeCharacters","isHex","String","fromCharCode","parseInt","throwInvalidUnicodeCharacter","throwInvalidEscapeCharacter","isValidStringCharacter","throwInvalidCharacter","expectEndOfString","codeMinus","expectDigit","codeZero","isNonZeroDigit","isDigit","codeDot","codeLowercaseE","codeUppercaseE","codePlus","codeComma","SyntaxError","concat","gotAt","codeColon","numSoFar","throwDuplicateKey","pos","chars","end","test","got","code","codeSpace","codeNewline","codeTab","codeReturn","codeNine","codeUppercaseA","codeUppercaseF","codeLowercaseA","codeLowercaseF","codeOne","isDeepEqual","a","b","Array","isArray","every","item","index","isObject","keys","_toConsumableArray","Set","Object","_typeof","f","n","r","t"],"sources":["../../src/parse.ts"],"sourcesContent":["import { parseLosslessNumber } from './numberParsers.js'\nimport { revive } from './revive.js'\nimport type { NumberParser, Reviver } from './types'\nimport { GenericObject, JavaScriptValue } from './types'\n\n/**\n * The LosslessJSON.parse() method parses a string as JSON, optionally transforming\n * the value produced by parsing.\n *\n * The parser is based on the parser of Tan Li Hou shared in\n * https://lihautan.com/json-parser-with-javascript/\n *\n * @param text\n * The string to parse as JSON. See the JSON object for a description of JSON syntax.\n *\n * @param [reviver]\n * If a function, prescribes how the value originally produced by parsing is\n * transformed, before being returned.\n *\n * @param [parseNumber=parseLosslessNumber]\n * Pass a custom number parser. Input is a string, and the output can be unknown\n * numeric value: number, bigint, LosslessNumber, or a custom BigNumber library.\n *\n * @returns Returns the Object corresponding to the given JSON text.\n *\n * @throws Throws a SyntaxError exception if the string to parse is not valid JSON.\n */\nexport function parse(\n  text: string,\n  reviver?: Reviver,\n  parseNumber: NumberParser = parseLosslessNumber\n): JavaScriptValue {\n  let i = 0\n  const value = parseValue()\n  expectValue(value)\n  expectEndOfInput()\n\n  return reviver ? revive(value, reviver) : value\n\n  function parseObject(): GenericObject<unknown> | undefined {\n    if (text.charCodeAt(i) === codeOpeningBrace) {\n      i++\n      skipWhitespace()\n\n      const object: GenericObject<unknown> = {}\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {\n        if (!initial) {\n          eatComma()\n          skipWhitespace()\n        } else {\n          initial = false\n        }\n\n        const start = i\n\n        const key = parseString()\n        if (key === undefined) {\n          throwObjectKeyExpected()\n        }\n\n        skipWhitespace()\n        eatColon()\n        const value = parseValue()\n\n        if (value === undefined) {\n          throwObjectValueExpected()\n        }\n\n        // TODO: test deep equal instead of strict equal\n        // if (Object.prototype.hasOwnProperty.call(object, key) && !isDeepEqual(value, object[key])) {\n        //   // Note that we could also test `if(key in object) {...}`\n        //   // or `if (object[key] !== 'undefined') {...}`, but that is slower.\n        //   throwDuplicateKey(key, start + 1)\n        // }\n\n        object[key] = value\n      }\n\n      if (text.charCodeAt(i) !== codeClosingBrace) {\n        throwObjectKeyOrEndExpected()\n      }\n      i++\n\n      return object\n    }\n  }\n\n  function parseArray(): Array<unknown> | unknown {\n    if (text.charCodeAt(i) === codeOpeningBracket) {\n      i++\n      skipWhitespace()\n\n      const array = []\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {\n        if (!initial) {\n          eatComma()\n        } else {\n          initial = false\n        }\n\n        const value = parseValue()\n        expectArrayItem(value)\n        array.push(value)\n      }\n\n      if (text.charCodeAt(i) !== codeClosingBracket) {\n        throwArrayItemOrEndExpected()\n      }\n      i++\n\n      return array\n    }\n  }\n\n  function parseValue(): unknown {\n    skipWhitespace()\n\n    const value =\n      parseString() ??\n      parseNumeric() ??\n      parseObject() ??\n      parseArray() ??\n      parseKeyword('true', true) ??\n      parseKeyword('false', false) ??\n      parseKeyword('null', null)\n\n    skipWhitespace()\n\n    return value\n  }\n\n  function parseKeyword(name: string, value: unknown): unknown | undefined {\n    if (text.slice(i, i + name.length) === name) {\n      i += name.length\n      return value\n    }\n  }\n\n  function skipWhitespace() {\n    while (isWhitespace(text.charCodeAt(i))) {\n      i++\n    }\n  }\n\n  function parseString() {\n    if (text.charCodeAt(i) === codeDoubleQuote) {\n      i++\n      let result = ''\n      while (i < text.length && text.charCodeAt(i) !== codeDoubleQuote) {\n        if (text.charCodeAt(i) === codeBackslash) {\n          const char = text[i + 1]\n          const escapeChar = escapeCharacters[char]\n          if (escapeChar !== undefined) {\n            result += escapeChar\n            i++\n          } else if (char === 'u') {\n            if (\n              isHex(text.charCodeAt(i + 2)) &&\n              isHex(text.charCodeAt(i + 3)) &&\n              isHex(text.charCodeAt(i + 4)) &&\n              isHex(text.charCodeAt(i + 5))\n            ) {\n              result += String.fromCharCode(parseInt(text.slice(i + 2, i + 6), 16))\n              i += 5\n            } else {\n              throwInvalidUnicodeCharacter(i)\n            }\n          } else {\n            throwInvalidEscapeCharacter(i)\n          }\n        } else {\n          if (isValidStringCharacter(text.charCodeAt(i))) {\n            result += text[i]\n          } else {\n            throwInvalidCharacter(text[i])\n          }\n        }\n        i++\n      }\n      expectEndOfString()\n      i++\n      return result\n    }\n  }\n\n  function parseNumeric() {\n    const start = i\n    if (text.charCodeAt(i) === codeMinus) {\n      i++\n      expectDigit(start)\n    }\n\n    if (text.charCodeAt(i) === codeZero) {\n      i++\n    } else if (isNonZeroDigit(text.charCodeAt(i))) {\n      i++\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (text.charCodeAt(i) === codeDot) {\n      i++\n      expectDigit(start)\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {\n      i++\n      if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {\n        i++\n      }\n      expectDigit(start)\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (i > start) {\n      return parseNumber(text.slice(start, i))\n    }\n  }\n\n  function eatComma() {\n    if (text.charCodeAt(i) !== codeComma) {\n      throw new SyntaxError(`Comma ',' expected after value ${gotAt()}`)\n    }\n    i++\n  }\n\n  function eatColon() {\n    if (text.charCodeAt(i) !== codeColon) {\n      throw new SyntaxError(`Colon ':' expected after property name ${gotAt()}`)\n    }\n    i++\n  }\n\n  function expectValue(value: unknown) {\n    if (value === undefined) {\n      throw new SyntaxError(`JSON value expected ${gotAt()}`)\n    }\n  }\n\n  function expectArrayItem(value: unknown) {\n    if (value === undefined) {\n      throw new SyntaxError(`Array item expected ${gotAt()}`)\n    }\n  }\n\n  function expectEndOfInput() {\n    if (i < text.length) {\n      throw new SyntaxError(`Expected end of input ${gotAt()}`)\n    }\n  }\n\n  function expectDigit(start: number) {\n    if (!isDigit(text.charCodeAt(i))) {\n      const numSoFar = text.slice(start, i)\n      throw new SyntaxError(`Invalid number '${numSoFar}', expecting a digit ${gotAt()}`)\n    }\n  }\n\n  function expectEndOfString() {\n    if (text.charCodeAt(i) !== codeDoubleQuote) {\n      throw new SyntaxError(`End of string '\"' expected ${gotAt()}`)\n    }\n  }\n\n  function throwObjectKeyExpected() {\n    throw new SyntaxError(`Quoted object key expected ${gotAt()}`)\n  }\n\n  function throwDuplicateKey(key: string, pos: number) {\n    throw new SyntaxError(`Duplicate key '${key}' encountered at position ${pos}`)\n  }\n\n  function throwObjectKeyOrEndExpected() {\n    throw new SyntaxError(`Quoted object key or end of object '}' expected ${gotAt()}`)\n  }\n\n  function throwArrayItemOrEndExpected() {\n    throw new SyntaxError(`Array item or end of array ']' expected ${gotAt()}`)\n  }\n\n  function throwInvalidCharacter(char: string) {\n    throw new SyntaxError(`Invalid character '${char}' ${pos()}`)\n  }\n\n  function throwInvalidEscapeCharacter(start: number) {\n    const chars = text.slice(start, start + 2)\n    throw new SyntaxError(`Invalid escape character '${chars}' ${pos()}`)\n  }\n\n  function throwObjectValueExpected() {\n    throw new SyntaxError(`Object value expected after ':' ${pos()}`)\n  }\n\n  function throwInvalidUnicodeCharacter(start: number) {\n    let end = start + 2\n    while (/\\w/.test(text[end])) {\n      end++\n    }\n    const chars = text.slice(start, end)\n    throw new SyntaxError(`Invalid unicode character '${chars}' ${pos()}`)\n  }\n\n  // zero based character position\n  function pos(): string {\n    return `at position ${i}`\n  }\n\n  function got(): string {\n    return i < text.length ? `but got '${text[i]}'` : 'but reached end of input'\n  }\n\n  function gotAt(): string {\n    return got() + ' ' + pos()\n  }\n}\n\nfunction isWhitespace(code: number): boolean {\n  return code === codeSpace || code === codeNewline || code === codeTab || code === codeReturn\n}\n\nfunction isHex(code: number): boolean {\n  return (\n    (code >= codeZero && code <= codeNine) ||\n    (code >= codeUppercaseA && code <= codeUppercaseF) ||\n    (code >= codeLowercaseA && code <= codeLowercaseF)\n  )\n}\n\nfunction isDigit(code: number): boolean {\n  return code >= codeZero && code <= codeNine\n}\n\nfunction isNonZeroDigit(code: number): boolean {\n  return code >= codeOne && code <= codeNine\n}\n\nexport function isValidStringCharacter(code: number): boolean {\n  return code >= 0x20 && code <= 0x10ffff\n}\n\nexport function isDeepEqual(a: unknown, b: unknown): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.length === b.length && a.every((item, index) => isDeepEqual(item, b[index]))\n  }\n\n  if (isObject(a) && isObject(b)) {\n    const keys = [...new Set([...Object.keys(a), ...Object.keys(b)])]\n    return keys.every((key) => isDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\nfunction isObject(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null\n}\n\n// map with all escape characters\nconst escapeCharacters: GenericObject<string> = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n}\n\nconst codeBackslash = 0x5c // \"\\\"\nconst codeOpeningBrace = 0x7b // \"{\"\nconst codeClosingBrace = 0x7d // \"}\"\nconst codeOpeningBracket = 0x5b // \"[\"\nconst codeClosingBracket = 0x5d // \"]\"\nconst codeSpace = 0x20 // \" \"\nconst codeNewline = 0xa // \"\\n\"\nconst codeTab = 0x9 // \"\\t\"\nconst codeReturn = 0xd // \"\\r\"\nconst codeDoubleQuote = 0x0022 // \"\nconst codePlus = 0x2b // \"+\"\nconst codeMinus = 0x2d // \"-\"\nconst codeZero = 0x30\nconst codeOne = 0x31\nconst codeNine = 0x39\nconst codeComma = 0x2c // \",\"\nconst codeDot = 0x2e // \".\" (dot, period)\nconst codeColon = 0x3a // \":\"\nexport const codeUppercaseA = 0x41 // \"A\"\nexport const codeLowercaseA = 0x61 // \"a\"\nexport const codeUppercaseE = 0x45 // \"E\"\nexport const codeLowercaseE = 0x65 // \"e\"\nexport const codeUppercaseF = 0x46 // \"F\"\nexport const codeLowercaseF = 0x66 // \"f\"\n"],"mappings":"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"}